// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int             @id @default(autoincrement())
  email              String          @unique
  name               String?
  password           String
  channelMemberships ChannelMember[]
}

model Bot {
  id                 Int             @id @default(autoincrement())
  name               String
  isActive           Boolean         @default(true)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  channelMemberships ChannelMember[]

  @@map("bots")
}

model Channel {
  id       Int             @id @default(autoincrement())
  name     String
  members  ChannelMember[]
  messages Message[]
}

model ChannelMember {
  id Int @id @default(autoincrement())

  // Member can be either a User or a Bot (only one should be set)
  user   User? @relation(fields: [userId], references: [id])
  userId Int?
  bot    Bot?  @relation(fields: [botId], references: [id])
  botId  Int?

  channel   Channel   @relation(fields: [channelId], references: [id])
  channelId Int
  messages  Message[]

  // Ensure only one type of member is set and unique combinations
  @@unique([userId, channelId])
  @@unique([botId, channelId])
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Author - unified through ChannelMember
  channelMemberId Int

  // Relations
  author    ChannelMember @relation(fields: [channelMemberId], references: [id])
  channel   Channel       @relation(fields: [channelId], references: [id])
  channelId Int

  // Reply functionality
  replyToMessageId Int?
  replyToMessage   Message?  @relation("MessageReplies", fields: [replyToMessageId], references: [id])
  replies          Message[] @relation("MessageReplies")
}
