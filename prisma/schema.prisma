// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int             @id @default(autoincrement())
  email              String          @unique
  name               String?
  password           String
  channelMemberships ChannelMember[]
}

model Bot {
  id                 Int                @id @default(autoincrement())
  name               String
  isActive           Boolean            @default(true)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  channelMemberships BotChannelMember[]

  @@map("bots")
}

model Channel {
  id         Int                @id @default(autoincrement())
  name       String
  members    ChannelMember[]
  messages   Message[]
  botMembers BotChannelMember[]
}

model ChannelMember {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  channel   Channel   @relation(fields: [channelId], references: [id])
  channelId Int
  messages  Message[]

  @@unique([userId, channelId])
}

model BotChannelMember {
  id        Int       @id @default(autoincrement())
  bot       Bot       @relation(fields: [botId], references: [id])
  botId     Int
  channel   Channel   @relation(fields: [channelId], references: [id])
  channelId Int
  messages  Message[]

  @@unique([botId, channelId])
  @@map("bot_channel_members")
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Author fields - only one will be used per message
  channelMemberId    Int?
  botChannelMemberId Int?

  // Relations
  author    ChannelMember?    @relation(fields: [channelMemberId], references: [id])
  botAuthor BotChannelMember? @relation(fields: [botChannelMemberId], references: [id])

  channel   Channel @relation(fields: [channelId], references: [id])
  channelId Int

  // Reply functionality
  replyToMessageId Int?
  replyToMessage   Message?  @relation("MessageReplies", fields: [replyToMessageId], references: [id])
  replies          Message[] @relation("MessageReplies")
}
